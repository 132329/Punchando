Pooling es hacer una peticion al servidor cada un intervalo de tiempo, como 1 segundo, es ineficiente por la cantidad de request que hay que hacer al servidor
sin necesidad, 
Long pooling, es mantener la conexion abierta hasta que haya nuevos datos disponibles, cuando no hay actualizacion en un periodo de tiempo determinado, cerrara la conexion, y comenzara con el proceso lanzando otra peticion, es solo un truco que hace creer que se basa en eventos, Aunque es mas eficiente, pues se reduce mucho el tiempo, seguimos haciedno peticiones para un proceso que no esta pensado de esa forma, 
Con serverSendEvents es posible que se haga alreves, en lugar de que el cliente envie petciones al server, sea el server que envie datos al navegador cliente pudiendo insertar actualizaciones esos mensajes entrantes se pueden tratar como eventos 
Server send events es parte de html5 no es soportado en todos los navegadores edge e IE no hay soporte
el servidores es quien crea una conexion con el navegador el navegador se mantiene a la escucha de nuevos eventos que se produzcan en el servidor, mientras la conexion se mantenga abierta, para usarla se usa eventsourse 
El servidor es que notifica el cliente y esto es un paso impotante, pero no todos los navegadores lo soportan
hay un limite de conexiones dispuestas por el navegador por domiinio, la conexion es unidireccional, solo se puede mandar texto

Web Sockets
Es una tecnologia que proporciona un canal de cominicaciones bidireccional y full-duplex sobre un unico socket tcp
se diseña para ser usada en en navegadores y servidores web pero puede ser usado por cualquier programa que funcione como cliente servidore las conexiones se usan atraves de los mismos puertos que usa http con el fin de ofrecer comatibilidad con el software http existente es decir, cuando el protocolo trabaja directamente sobre tcp usa el puerto 80 y cuando usa tls usa el 443 pero este es un protocolo independiente no debemos preocuparnos por el limite de conexiones http como pasa en server send evensts... soporta tipos de datos binarios por lo que se puede hacer streaming de datos 

El ciclo de vida de un websocket
*Negociacion del protocolo websocket (handshake)
*Intercambio de informacion
*Cierre de la conexion
todo esto ocurre en el mismo socket tcp 

Negociacion, el ciente envia una peticion de negociacon websocket y el servidor envia una respuesta al cliente con el resultado de dicha negociacion, 
A pesar de que el cliente le envia la version que el tiene de websoket, el server no responde con la version, solo le dice si soporta o no su version, en caso de no soportarla si le devuelve la version minima o maxima soportada segun sea el caso
La unidad escencial de transferencia de informacion, son los mensajes
que estan compuestos por una o mas trama cada una de ellas tendra un tipo de datos asociado que conicncidara con el  que tengan el resto de tramas del mismo mensaje, existen trams que contienen texto, que se interpreta como utf8
, hay tramas de control pensadas para ser usadas por el protocolo, hay 6 de estas y se dejan 10 para el futuro
todas las tramas del cliente al servidor estan enmascaradas, 

Control automatico de conexiones, 
multiplataforma, rapido y ligero
broadcasting de mensajes (grupo o espeficico)

Rpc Remote Procedure Call: es un protocolo que permite a un software ejecutar codigo en una maquina remota sin preocuparse de la conexion
signal r hace esto, 

Hub Es una clase que deriva de la clase base hub y desde sus metodos podremos llamar una funcion en todos los clientes a un cliente concreto o de un grupo de clientes

Signal r por defecto usa wbesokets por ser el mas eficiente de los protocolos , pero dispone de un mecanismo de respaldo que le permite usar los demas en caso de no poder establecer la conexion

Escalabilidad, es la habilidad para reaccionar y adaptarse sin perder calidad, o manejar el crecimiento continuo de trabajo de manera fluida para estar preparado para que nuestra aplicacion se haga mas grande, poder dar soporte a millones de uusairos que vengan de golpe cuanod pensamos la aplicacion para cientos de personas
hay dos formas de escalar, escalado vertical y escalado horizontal 
vertical consiste en usar un servidor mas grande o mas potente, escalar horizontalmente es agregar mas servidores para administrar esta carga
escalar horizontal siempre va a ser mejor
pero con esto puede que los clientes se conecten a distintos servidores
un cliente conectado a un servidor, no va a recibir los mensajes de otro servidor , el hub del servidor, solo conoce los clientes conectados a el, y no conoce los cleintes conectados a otros hubs de otros servidores , como podemos escalar esto y escalar masivamente nuestro sistema de notificaicones? la solucion consiste en reenviar los mensajes entre servidores usando backplane , con este, cada instancia de la aplicacion, envia mensajes al baclplain y es este el que se encarga de reenviar a todas las demas instancias de la aplicacion en electronica backplane es un conjunto de conectores en paralelo, por analogia en signal r,conecta varios servidores 


